{"version":3,"sources":["../src/is-map-x.js"],"names":[],"mappings":"AAAA,OAAO,IAAP,MAAiB,sCAAjB;AACA,OAAO,OAAP,MAAoB,WAApB;AACA,OAAO,YAAP,MAAyB,kBAAzB;AACA,OAAO,QAAP,MAAqB,aAArB;;AAEA,IAAM,KAAK,GAAG,SAAS,KAAT,GAAiB;AAC7B,SAAO,OAAO,CAAC,SAAS,SAAT,GAAqB;AAClC;AACA,WAAO,IAAI,GAAJ,EAAP;AACD,GAHa,CAAd;AAID,CALD;;AAOA,IAAM,iBAAiB,GAAG,SAAS,iBAAT,CAA2B,UAA3B,EAAuC;AAC/D,MAAM,QAAQ,GAAG,KAAK,EAAtB;;AAEA,MAAI,QAAQ,CAAC,KAAT,KAAmB,KAAnB,IAA4B,YAAY,CAAC,QAAQ,CAAC,KAAV,CAA5C,EAA8D;AAC5D,QAAM,GAAG,GAAG,OAAO,CAAC,IAAR,CAAa,QAAQ,CAAC,KAAtB,EAA6B,UAAU,CAAC,GAAxC,CAAZ;;AAEA,QAAI,GAAG,CAAC,KAAJ,KAAc,KAAd,IAAuB,QAAQ,CAAC,GAAG,CAAC,KAAL,CAAnC,EAAgD;AAC9C,aAAO,UAAU,CAAC,GAAlB;AACD;AACF;;AAED,SAAO,IAAP;AACD,CAZD;;AAcA,IAAM,SAAS,GAAG,SAAS,SAAT,GAAqB;AACrC,MAAI,OAAO,GAAP,KAAe,UAAnB,EAA+B;AAC7B;AACA,QAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,SAAL,EAAgB,MAAhB,CAAvB;;AAEA,QAAI,UAAU,IAAI,OAAO,UAAU,CAAC,GAAlB,KAA0B,UAA5C,EAAwD;AACtD,UAAM,MAAM,GAAG,iBAAiB,CAAC,UAAD,CAAhC;;AAEA,UAAI,MAAM,KAAK,IAAf,EAAqB;AACnB,eAAO,MAAP;AACD;AACF;AACF;;AAED,SAAO,IAAP;AACD,CAfD;;AAiBA,IAAM,OAAO,GAAG,SAAS,EAAzB;AAEA;;;;;;;;AAOA,IAAM,KAAK,GAAG,SAAS,KAAT,CAAe,MAAf,EAAuB;AACnC,MAAI,OAAO,KAAK,IAAZ,IAAoB,YAAY,CAAC,MAAD,CAAZ,KAAyB,KAAjD,EAAwD;AACtD,WAAO,KAAP;AACD;;AAED,MAAM,MAAM,GAAG,OAAO,CAAC,IAAR,CAAa,MAAb,EAAqB,OAArB,CAAf;AAEA,SAAO,MAAM,CAAC,KAAP,KAAiB,KAAjB,IAA0B,QAAQ,CAAC,MAAM,CAAC,KAAR,CAAzC;AACD,CARD;;AAUA,eAAe,KAAf","file":"is-map-x.esm.js","sourcesContent":["import gOPD from 'object-get-own-property-descriptor-x';\nimport attempt from 'attempt-x';\nimport isObjectLike from 'is-object-like-x';\nimport isLength from 'is-length-x';\n\nconst test1 = function test1() {\n  return attempt(function createMap() {\n    /* eslint-disable-next-line compat/compat */\n    return new Map();\n  });\n};\n\nconst getFromDescriptor = function getFromDescriptor(descriptor) {\n  const resTest1 = test1();\n\n  if (resTest1.threw === false && isObjectLike(resTest1.value)) {\n    const res = attempt.call(resTest1.value, descriptor.get);\n\n    if (res.threw === false && isLength(res.value)) {\n      return descriptor.get;\n    }\n  }\n\n  return null;\n};\n\nconst getGetter = function getGetter() {\n  if (typeof Map === 'function') {\n    /* eslint-disable-next-line compat/compat */\n    const descriptor = gOPD(Map.prototype, 'size');\n\n    if (descriptor && typeof descriptor.get === 'function') {\n      const getter = getFromDescriptor(descriptor);\n\n      if (getter !== null) {\n        return getter;\n      }\n    }\n  }\n\n  return null;\n};\n\nconst getSize = getGetter();\n\n/**\n * Determine if an `object` is a `Map`.\n *\n * @param {*} object - The object to test.\n * @returns {boolean} `true` if the `object` is a `Map`,\n *  else `false`.\n */\nconst isMap = function isMap(object) {\n  if (getSize === null || isObjectLike(object) === false) {\n    return false;\n  }\n\n  const result = attempt.call(object, getSize);\n\n  return result.threw === false && isLength(result.value);\n};\n\nexport default isMap;\n"]}
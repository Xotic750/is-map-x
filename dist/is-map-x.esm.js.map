{"version":3,"sources":["../src/is-map-x.js"],"names":[],"mappings":";;;;AAAA,OAAO,IAAP,MAAiB,sCAAjB;AACA,OAAO,OAAP,MAAoB,WAApB;AACA,OAAO,YAAP,MAAyB,kBAAzB;AACA,OAAO,QAAP,MAAqB,aAArB;AAEA;;AACA,IAAM,WAAW,GAAG,KAAK,WAAzB;AAEA,IAAI,OAAJ;;AAEA,IAAI,OAAO,GAAP,KAAe,UAAnB,EAA+B;AAC7B;AACA,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,SAAL,EAAgB,MAAhB,CAAvB;;AAEA,MAAI,UAAU,IAAI,OAAO,UAAU,CAAC,GAAlB,KAA0B,UAA5C,EAAwD;AACtD,QAAI,GAAG,GAAG,OAAO,CAAC,YAAM;AAAA;;AACtB;AACA,aAAO,IAAI,GAAJ,EAAP;AACD,KAHgB,YAAjB;;AAKA,QAAI,GAAG,CAAC,KAAJ,KAAc,KAAd,IAAuB,YAAY,CAAC,GAAG,CAAC,KAAL,CAAvC,EAAoD;AAClD,MAAA,GAAG,GAAG,OAAO,CAAC,IAAR,CAAa,GAAG,CAAC,KAAjB,EAAwB,UAAU,CAAC,GAAnC,CAAN;;AAEA,UAAI,GAAG,CAAC,KAAJ,KAAc,KAAd,IAAuB,QAAQ,CAAC,GAAG,CAAC,KAAL,CAAnC,EAAgD;AAC9C,QAAA,OAAO,GAAG,UAAU,CAAC,GAArB;AACD;AACF;AACF;AACF;AAED;;;;;;;;;AAOA,IAAM,KAAK,GAAG,SAAS,KAAT,CAAe,MAAf,EAAuB;AACnC,MAAI,WAAW,CAAC,OAAD,CAAX,KAAyB,KAAzB,IAAkC,YAAY,CAAC,MAAD,CAAZ,KAAyB,KAA/D,EAAsE;AACpE,WAAO,KAAP;AACD;;AAED,MAAM,MAAM,GAAG,OAAO,CAAC,IAAR,CAAa,MAAb,EAAqB,OAArB,CAAf;AAEA,SAAO,MAAM,CAAC,KAAP,KAAiB,KAAjB,IAA0B,QAAQ,CAAC,MAAM,CAAC,KAAR,CAAzC;AACD,CARD;;AAUA,eAAe,KAAf","file":"is-map-x.esm.js","sourcesContent":["import gOPD from 'object-get-own-property-descriptor-x';\nimport attempt from 'attempt-x';\nimport isObjectLike from 'is-object-like-x';\nimport isLength from 'is-length-x';\n\n/** @type {BooleanConstructor} */\nconst castBoolean = true.constructor;\n\nlet getSize;\n\nif (typeof Map === 'function') {\n  /* eslint-disable-next-line compat/compat */\n  const descriptor = gOPD(Map.prototype, 'size');\n\n  if (descriptor && typeof descriptor.get === 'function') {\n    let res = attempt(() => {\n      /* eslint-disable-next-line compat/compat */\n      return new Map();\n    });\n\n    if (res.threw === false && isObjectLike(res.value)) {\n      res = attempt.call(res.value, descriptor.get);\n\n      if (res.threw === false && isLength(res.value)) {\n        getSize = descriptor.get;\n      }\n    }\n  }\n}\n\n/**\n * Determine if an `object` is a `Map`.\n *\n * @param {*} object - The object to test.\n * @returns {boolean} `true` if the `object` is a `Map`,\n *  else `false`.\n */\nconst isMap = function isMap(object) {\n  if (castBoolean(getSize) === false || isObjectLike(object) === false) {\n    return false;\n  }\n\n  const result = attempt.call(object, getSize);\n\n  return result.threw === false && isLength(result.value);\n};\n\nexport default isMap;\n"]}